WELCOME TO THE GIT CHEAT SHEET 

    AUTHOR:         ESHAN KALP TRIVEDI  (EshanTrivedi21)
    START DATE:     20/09/22
    END DATE:       ~~~~~~~~
    DESCRIPTION:    Your very own Git Cheat Sheet having basic Windows Terminal Cheats as well!

*** GO ON FROM HERE, ALL THE BEST ***



TERMINAL BASICS: 

    >> ls                                   (it is the LIST command which LISTS all the contents of a Directory)

    >> ls foldername                        (LOCATES to a directory and then LISTS the contents)

    >> pwd                                  (PRINT WORKING DIRECTORY)

    >> cd C:\User\Eshan\foldername          (CHANGES and HOPS onto the respective Working Directory)

    >> cd ..                                (HOPS onto the Parent Directory of the Working Directory)

    >> clear                                (CLEARS the used Terminal)

    >> q                                    (QUITS out of a entered command)

    >> mkdir foldername                     (CREATES an Empty directory inside the Working Directory)

    >> rm filename                          (DELETES the file)

    >> rm -rf foldername                    (DELETES the directory)

    >> start .                              (OPENS the File Explorer to the ROOT Directory)



SETTING GIT USER NAME AND EMAIL: 

    >> git config user.name                                             (to CHECK if git User-Name is set)

    >> git config user.email                                            (to CHECK if git User-Email is set)

    >> git config --global user.name "Eshan Trivedi"                    (To SET or CHANGE git User-Name)

    >> git config --global user.email eshan.trivedi.9@gmail.com         (To SET or CHANGE git User-Email)

    >> git config --global core.editor "code --wait"                    (to SET or CHANGE default code editor as VsCode)



CREATING A GIT REPOSITORY:

    STEP 1:     >> git init             (INITIALIZES an empty repository)

    STEP 2:     >> git status           (to CHECK the status of a repository, a .git directory is created, all git history is deleted if .git is deletec)



STAGING FILE/FILES OF THE REPOSITORY

    >> git add filename.txt                           (STAGES the file)

    >> git rm --cached filename.txt                   (UN-STAGES the file)

    >> git add --all      OR      >> git all .        (STAGES all files in the repository)



COMMITING A COMMIT 

    >> git commit -m "commit message"           (COMMITS the STAGED files with a commit message)

    >> git commit -a -m "commit message"        (SKIPS the Staging part and directly COMMITS)

    >> git log                                  (LOGS all the commits done to the repository)

    >> git log --oneline                        (LOG commits in a single line)

    >> git commit --ammend                      (AMMENDS the previous commit)



EVERYTHING ABOUT GIT IGNORE

    STEP 1:             create a .gitignore file

    STEP 2:             add files or folders inside the file to ignore, now the files are are untracked by github and wont be staged or commited



GIT BRANCHING 

    >> git branch                       (LOGS all the branches of the Working Repository with an * in the Current Head or GO to .git\refs\heads)

    >> git branch branchname            (CREATES a new branch but the branch is not yet SWITCHED)

    >> git switch branchname            (SWITCHES the Branch from one to another or CHANGING HEAD, but the current changes need to be STASHED or COMMITED)

    >> git switch -c newbranch          (CREATES a new branch and then SWITCHES to the branches)

    >> git branch -D newbranch          (DELETES newbranch, but you cant be Headed on the Branch you want to delete)

    >> git branch -M finalbranch        (CHANGES the name of the Branch you are Headed on)



MERGING BRANCHES 

    FAST FORWARD MERGE (NO CHANGES done on the Master Branch)

        STEP 1:         >> git switch master            (SWITCH the HEAD first to the first branch)

        STEP 2:         >> git merge newbranch          (MERGES newbranch into master with HEAD on master)

    